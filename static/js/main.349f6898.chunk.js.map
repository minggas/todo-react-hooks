{"version":3,"sources":["serviceWorker.js","index.js","hooks/useTodoReducer.js","styles/GlobalStyle.js","components/container/App.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","react_default","a","createElement","App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","useTodoReducer","action","type","payload","newTodo","Object","toConsumableArray","text","isChecked","filter","_","index","map","todo","objectSpread","id","GlobalStyle","createGlobalStyle","_templateObject","props","Header","lazy","__webpack_require__","e","bind","InputTodo","TodoList","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","raw","localStorage","getItem","JSON","parse","setItem","stringify","react","fallback","Context","Provider","value","styles_GlobalStyle","todos","React","createContext"],"mappings":"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","file":"static/js/main.349f6898.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export default (state, action) => {\n  switch (action.type) {\n    case \"reset\":\n      return action.payload;\n    case \"addTodo\": {\n      const newTodo = action.payload;\n      return [...state, { text: newTodo, isChecked: false }];\n    }\n    case \"deleteTodo\":\n      return state.filter((_, index) => index !== action.payload);\n    case \"completeTodo\":\n      return state.map((todo, index) => {\n        if (index === action.payload) {\n          return {\n            ...todo,\n            isChecked: !todo.isChecked\n          };\n        } else {\n          return { ...todo };\n        }\n      });\n    case \"updateTodo\":\n      return state.map((todo, index) => {\n        if (index === action.payload.id) {\n          return {\n            ...todo,\n            text: action.payload.text\n          };\n        } else {\n          return { ...todo };\n        }\n      });\n    default:\n      return state;\n  }\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n:root {\n\t--main-bg-color: rgb(200,200,200);\n}\n\n  html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video, input {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n  vertical-align: baseline;\n  box-sizing: border-box;\n}\n\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n  line-height: 1;\n  width:100vw;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\nbutton, input[type=submit], input[type=checkbox] {\n\tcursor: pointer;\n}\n#root {\n\tmax-width: 500px;\n\tmargin: 0 auto;\n\tborder-radius: 5px;\n}\n`;\n\nexport default GlobalStyle;\n","import React, { useReducer, useEffect, Suspense, lazy } from \"react\";\nimport useTodoReducer from \"../../hooks/useTodoReducer\";\nimport GlobalStyle from \"../../styles/GlobalStyle\";\n\nexport default function App(props) {\n  const Header = lazy(() => import(\"../Header\"));\n  const InputTodo = lazy(() => import(\"./FormTodo\"));\n  const TodoList = lazy(() => import(\"./TodoList\"));\n  const [state, dispatch] = useReducer(useTodoReducer, []);\n\n  useEffect(() => {\n    const raw = localStorage.getItem(\"data\");\n    dispatch({ type: \"reset\", payload: JSON.parse(raw) || [] });\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"data\", JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Context.Provider value={dispatch}>\n        <GlobalStyle />\n        <Header />\n        <InputTodo />\n        <TodoList todos={state} />\n      </Context.Provider>\n    </Suspense>\n  );\n}\n\nexport const Context = React.createContext();\n"],"sourceRoot":""}